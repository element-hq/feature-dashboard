{"version":3,"sources":["Github.js","components/Fail.js","components/TokenInput.js","components/Plan.js","components/Summary.js","components/Burndown.js","App.js","serviceWorker.js","index.js"],"names":["Github","token","octokit","Octokit","status","connection","undefined","auth","concat","request","then","_","catch","e","name","issue","options","issues","listComments","endpoint","merge","owner","repo","number","paginate","comments","map","comment","body","unshift","join","split","completed","filter","trim","toLowerCase","startsWith","length","outstanding","labels","searchRepos","query","project","graphql","headers","authorization","console","log","searchString","label","search","issuesAndPullRequests","q","githubIssues","Issue","githubIssue","Object","classCallCheck","this","url","html_url","color","progress","title","assignees","components","repository_url","_components$slice","slice","_components$slice2","slicedToArray","type","getType","state","getState","includes","_i","_arr","priority","assignee","Fail","react_default","a","createElement","Array","props","location","pathname","match","Component","TokenInput","preventDefault","prompt","localStorage","getItem","setItem","window","reload","className","onClick","handleClick","Plan","_ref","_this","phases","toConsumableArray","Set","apply","sort","b","Number","phasedIssues","forEach","phase","states","indexOf","key","href","components_TokenInput","connectionStatus","template","deliveryDate","todo","p1bugs","p2bugs","p3bugs","others","wip","done","establishDeliveryDate","milestone","due_on","Date","Math","max","SummaryRow","repoFeature","counted","reduce","total","toFixed","login","advanced","item","queryString","searchUrl","assigneesFilter","getAssigneesFilter","issueNumbers","x","target","rel","makeLink","dateFormat","calculatePercentCompleted","Summary","feature","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop","value","_iterator3","repos","Symbol","iterator","next","err","return","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","values","generateSummary","rows","Summary_SummaryRow","Burndown","dates","issueCounts","date","min","created_at","today","tomorrow","setDate","getDate","day","start","end","closed_at","n","datasets","data","lineTension","maxDate","keys","maxIssues","todaysIssues","elapsedDays","rate","remainingDays","Infinity","i","projection","fill","pointRadius","borderColor","borderWidth","react_chartjs_2_es","scales","yAxes","ticks","App","possibleConstructorReturn","getPrototypeOf","call","hash","parse","substring","isArray","getConnection","setState","document","getIssues","_this2","es","onChange","react_router_dom","react_router","path","render","components_Summary","assign","components_Plan","components_Burndown","exact","component","RedirectLegacy","replace","Boolean","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAGMA,qJAEyBC,8EAClBA,2CACM,CACHC,QAAS,IAAIC,IACbC,OAAQ,kCAIZC,OAAaC,EAEbJ,EAAU,IAAIC,IAAQ,CACtBI,KAAI,SAAAC,OAAWP,cAEbC,EAAQO,QAAQ,SACjBC,KAAK,SAAAC,GACFN,EAAa,CACTH,QAASA,EACTE,OAAQ,mBAGfQ,MAAM,SAAAC,GACY,cAAXA,EAAEC,MAAqC,MAAbD,EAAET,SAC5BC,EAAa,CACTH,QAAS,IAAIC,IACbC,OAAQ,0DAKjBC,8KAGeH,EAASa,sFAC3BC,EAAUd,EAAQe,OAAOC,aAAaC,SAASC,MAAM,CACrDC,MAAON,EAAMM,MACbC,KAAMP,EAAMO,KACZC,OAAQR,EAAMQ,kBAEGrB,EAAQsB,SAASR,iBACtCS,GADIA,UACgBC,IAAI,SAAAC,GAAO,OAAIA,EAAQC,QAClCC,QAAQd,EAAMa,MACvBH,EAAWA,EAASK,KAAK,MAAMC,MAAM,SACjCC,EAAYP,EAASQ,OAAO,SAAAN,GAAO,OAAIA,EAAQO,OAAOC,cAAcC,WAAW,WAAUC,OACzFC,EAAcb,EAASQ,OAAO,SAAAN,GAAO,OAAIA,EAAQO,OAAOE,WAAW,WAAUC,yBAC1E,CACHL,UAAWA,EACXM,YAAaA,mLAIMC,EAAQC,+FACzBC,i6BAsBaD,2EAARlB,YACgBA,EAAKS,MAAM,wBAA7BV,OAAOqB,iBACOC,IAAQF,EAAO,CAC9BG,QAAS,CACLC,cAAe,kDAEnBxB,MAAOA,EACPqB,QAASA,EACTH,OAAQA,YANRtB,SAQJ6B,QAAQC,IAAI9B,mdAIGf,EAASqC,EAAQC,oFAChCQ,EAAeR,EAAYd,IAAI,SAAAJ,GAAI,MAAI,QAAUA,IAChDQ,KAAK,KAAO,IAAMS,EAAOb,IAAI,SAAAuB,GAAK,eAAAzC,OAAayC,KAASnB,KAAK,KAAO,YAEnEd,EAAUd,EAAQgD,OAAOC,sBAAsBhC,SAASC,MAAM,CAChEgC,EAAGJ,aAGkB9C,EAAQsB,SAASR,iBAAtCqC,2BAEGA,EAAa3B,IAAI,SAAAX,GAAK,OAAI,IAAIuC,EAAMvC,iHAK7CuC,aAEF,SAAAA,EAAYC,GAAcC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAEtBI,KAAKH,YAAcA,EACnBG,KAAKC,IAAMJ,EAAYK,SACvBF,KAAKnB,OAASgB,EAAYhB,OAAOb,IAAI,SAAAuB,GACjC,MAAO,CACHY,MAAOZ,EAAMY,MACb/C,KAAMmC,EAAMnC,QAGpB4C,KAAKI,cAAWxD,EAChBoD,KAAKK,MAAQR,EAAYQ,MACzBL,KAAKnC,OAASgC,EAAYhC,OAC1BmC,KAAKM,UAAYT,EAAYS,UAE7B,IAAIC,EAAaV,EAAYW,eAAenC,MAAM,KAf7BoC,EAgBKF,EAAWG,MAAMH,EAAW5B,OAAS,GAhB1CgC,EAAAb,OAAAc,EAAA,EAAAd,CAAAW,EAAA,GAgBpBT,KAAKrC,MAhBegD,EAAA,GAgBRX,KAAKpC,KAhBG+C,EAAA,GAkBrBX,KAAKa,KAAOjB,EAAMkB,QAAQjB,GAC1BG,KAAKe,MAAQnB,EAAMoB,SAASnB,4DAIjBA,GACX,IAAIhB,EAASgB,EAAYhB,OAAOb,IAAI,SAAAuB,GAAK,OAAIA,EAAMnC,OACnD,GAAIyB,EAAOoC,SAAS,OAAQ,CACxB,QAAAC,EAAA,EAAAC,EAAuB,CAAC,KAAM,KAAM,MAApCD,EAAAC,EAAAxC,OAAAuC,IAA2C,CAAtC,IAAME,EAAQD,EAAAD,GACf,GAAIrC,EAAOoC,SAASG,GAChB,SAAAtE,OAAUsE,EAAV,QAGR,eAGC,OAAIvC,EAAOoC,SAAS,YAAcpC,EAAOoC,SAAS,eAC5C,SAEJ,0CAGKpB,GACZ,MAA0B,WAAtBA,EAAYkB,MACL,OAEoB,SAAtBlB,EAAYkB,OACoB,IAAjClB,EAAYS,UAAU3B,aACG/B,IAAzBiD,EAAYwB,SAKT,MAHA,gBASJ/E,IC/IAgF,mLAlBP,OACIC,EAAAC,EAAAC,cAAA,mkBAQEC,MAAMtD,KACJ4B,KAAK2B,MAAMC,SAASC,SAASC,MAAM,YACnC,6BAVJ,aAJOC,qBC0BJC,sLAxBC7E,GACRA,EAAE8E,iBACF,IAAI1F,EAAQ2F,OAAO,wBAAyBC,aAAaC,QAAQ,iBAAmB,IACtE,OAAV7F,IACA4F,aAAaE,QAAQ,eAAgB9F,GACrC+F,OAAOV,SAASW,2CAKpB,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,UAAS,cAAA1F,OAAiBkD,KAAK2B,MAAMjF,QACtC+F,QAAUzC,KAAK0C,YACfrC,MAC0B,oBAAtBL,KAAK2B,MAAMjF,OAA+B,qFACpB,wBAAtBsD,KAAK2B,MAAMjF,OAAmC,qEAAuE,uDAEjG,oBAAtBsD,KAAK2B,MAAMjF,OAA+B,OAAS,GANzD,gCAbaqF,aCiEVY,mLA7DF,IAAAC,EAAAC,EAAA7C,KACD8C,EAAShD,OAAAiD,EAAA,EAAAjD,CAAI,IAAIkD,KACjBJ,EAAA,IAAG9F,OAAHmG,MAAAL,EAAA9C,OAAAiD,EAAA,EAAAjD,CAAaE,KAAK2B,MAAMpE,OAAOS,IAAI,SAAAX,GAAK,OACpCA,EAAMwB,OAAOb,IAAI,SAAAuB,GAAK,OAAIA,EAAMnC,aAEnCmB,OAAO,SAAAgB,GAAK,OAAIA,EAAMb,WAAW,YACjCwE,KAAK,SAAC1B,EAAG2B,GACN,OAAOC,OAAO5B,EAAEnD,MAAM,KAAK,IACvB+E,OAAOD,EAAE9E,MAAM,KAAK,MAG5BgF,EAAe,GAgBnB,OAfAP,EAAOQ,QAAQ,SAAAC,GACXF,EAAaE,GAASV,EAAKlB,MAAMpE,OAAOgB,OAAO,SAAAlB,GAC3C,OAAOA,EAAMwB,OAAOb,IAAI,SAAAuB,GAAK,OAAIA,EAAMnC,OAClC6D,SAASsC,KAEbL,KAAK,SAAC1B,EAAG2B,GACN,IAAIK,EAAS,CAAC,OAAQ,MAAO,QAC7B,OAAIhC,EAAET,QAAUoC,EAAEpC,MACPS,EAAE3D,OAASsF,EAAEtF,OAGb2F,EAAOC,QAAQjC,EAAET,OAASyC,EAAOC,QAAQN,EAAEpC,WAK9DQ,EAAAC,EAAAC,cAAA,OAAKe,UAAU,QACXjB,EAAAC,EAAAC,cAAA,KAAGe,UAAU,SAAUxC,KAAK2B,MAAM9C,OAAOT,KAAK,MAC9CmD,EAAAC,EAAAC,cAAA,UAEQqB,EAAO9E,IAAI,SAAAuF,GACP,OACIhC,EAAAC,EAAAC,cAAA,MAAIe,UAAU,QAAQkB,IAAMH,GAAUA,EAClChC,EAAAC,EAAAC,cAAA,UAEQ4B,EAAaE,GAAOvF,IAAI,SAAAX,GAAK,OACzBkE,EAAAC,EAAAC,cAAA,MAAIe,UAAU,OAAOkB,IAAMrG,EAAMQ,QAC7B0D,EAAAC,EAAAC,cAAA,KAAGkC,KAAOtG,EAAM4C,KAAhB,GAAAnD,OAA2BO,EAAMQ,OAAjC,KAAAf,OAA2CO,EAAMgD,QACjDkB,EAAAC,EAAAC,cAAA,QAAMe,UAAY,SAAWnF,EAAM0D,OAEf,SAAhB1D,EAAM0D,MAAmB,UAA4B,QAAhB1D,EAAM0D,MAAkB,iBAAmB,YAYxHQ,EAAAC,EAAAC,cAACmC,EAAD,CAAYlH,OAASsD,KAAK2B,MAAMkC,2BAxD7B9B,8BCCnB,SAAS+B,EAASjF,EAAQjB,GACtB,MAAO,CACHiB,OAAQA,EACRjB,KAAMA,EACNmG,kBAAcnH,EACdoH,KAAM,CACFzG,OAAQ,GACR0G,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,IAEZC,IAAK,CACD9G,OAAQ,GACR0G,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,IAEZE,KAAM,CACF/G,OAAQ,GACR0G,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,KAKpB,SAASG,EAAsBlH,EAAO0G,GAClC,OAAqB,OAAjBA,EACO,KAEF1G,EAAMmH,WAAanH,EAAMmH,UAAUC,YACnB7H,IAAjBmH,EACO,IAAIW,KAAKrH,EAAMmH,UAAUC,QAGzBE,KAAKC,IAAIb,EAAc,IAAIW,KAAKrH,EAAMmH,UAAUC,SAIpD,SA4BTI,oMACwBC,GACtB,IAAIC,EAAU,CAAC,SAAU,UAErBzG,EAAYyG,EAAQ/G,IAAI,SAAA6C,GAAI,OAAIiE,EAAYR,KAAKzD,GAAMlC,SAAQqG,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAI2B,IACpF8B,EAAQF,EAAQ/G,IAAI,SAAA6C,GAAI,OACxBiE,EAAYd,KAAKnD,GAAMlC,OACvBmG,EAAYT,IAAIxD,GAAMlC,OACtBmG,EAAYR,KAAKzD,GAAMlC,SAAQqG,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAI2B,GAAG,GAE3D,OAAc,IAAV8B,EACO,KAEH3G,EAAY2G,EAAQ,KAAKC,QAAQ,8CAG1B3H,GACf,IAAIgB,EAASuB,OAAAiD,EAAA,EAAAjD,CAAI,IAAIkD,IAAIzF,EAAOS,IAAI,SAAAX,GAAK,OAAIA,EAAMiD,UAAUtC,IAAI,SAAAqD,GAAQ,OAAIA,EAAS8D,UACjFH,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAE1E,OAAOqG,IAAI,MAC9BnF,IAAI,SAAAqD,GAAQ,kBAAAvE,OAAgBuE,KAC5BjD,KAAK,KAIV,OAHKG,IACDA,EAAS,eAENA,mCAGFX,EAAMiB,EAAQa,EAAGnC,GACtB,GAAsB,IAAlBA,EAAOoB,OACP,OACI4C,EAAAC,EAAAC,cAAA,iBAGH/B,IACDA,EAAI,IAER,IAAI0F,GAAW,EAEX1F,EAAEuB,SAAS,gBAOXvB,EAAIA,EAAEnB,OAAO,SAAA8G,GAAI,MAAa,eAATA,IACrBD,GAAW,GAIf,IAAIE,GAFJ5F,EAAIA,EAAE5C,OAAO+B,EAAOb,IAAI,SAAAuB,GAAK,eAAAzC,OAAayC,OAEtBnB,KAAK,KAErBmH,EAAY,GAChB,GAAIH,EAAU,CACV,IAAII,EAAkBxF,KAAKyF,mBAAmBlI,GAC9CgI,EAAS,qDAAAzI,OAAwDc,EAAxD,KAAAd,OAAgEwI,EAAhE,KAAAxI,OAA+E0I,EAA/E,0CAGTD,EAAS,sBAAAzI,OAAyBc,EAAzB,6BAAAd,OAAyDwI,GAGtE,IAAII,EAAenI,EAAOS,IAAI,SAAA2H,GAAC,UAAA7I,OAAQ6I,EAAE9H,OAAV,KAAAf,OAAoB6I,EAAEtF,SAAS2E,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAE1E,OAAOqG,IAAI,IAC5F,OACI5B,EAAAC,EAAAC,cAAA,KAAGkC,KAAO4B,EAAYK,OAAO,SAASC,IAAI,sBAAsBxF,MAAQqF,EAAatH,KAAK,OACpFsH,EAAa/G,yCAMvB,IAAImG,EAAc9E,KAAK2B,MAAMmD,YAE7B,OACIvD,EAAAC,EAAAC,cAAA,OAAKe,UAAU,eACXjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGkC,KAAI,sBAAA7G,OAA0BgI,EAAYlH,KAAtC,YAAyDkH,EAAYlH,OACjF2D,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,cACA,iBAEJiG,EAAYd,KAAKzG,SAGzBgE,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,aACA,iBAEJiG,EAAYT,IAAI9G,SAGxBgE,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,YACA,iBAEJiG,EAAYR,KAAK/G,SAGzBgE,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,cACA,YACA,YACA,YACA,YACA,aAEJiG,EAAYd,KAAKC,SAGzB1C,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,cACA,YACA,YAEJiG,EAAYd,KAAKE,SAGzB3C,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,cACA,YACA,YAEJiG,EAAYd,KAAKG,SAGzB5C,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,UACA,aACA,aAEJiG,EAAYT,IAAIJ,OAAOnH,OAAOgI,EAAYT,IAAIH,QAAQpH,OAAOgI,EAAYT,IAAIF,UAGrF5C,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CACI,YACA,aAEJiG,EAAYR,KAAKL,OAAOnH,OAAOgI,EAAYR,KAAKJ,QAAQpH,OAAOgI,EAAYR,KAAKH,UAGxF5C,EAAAC,EAAAC,cAAA,WACIzB,KAAK8F,SACDhB,EAAYlH,KACZkH,EAAYjG,OACZ,CAAC,WAAW/B,OAAOgI,EAAYd,KAAKI,OAAOtH,OAAOgI,EAAYT,IAAID,QAAQpG,IAAI,SAAAX,GAAK,OAAIA,EAAMQ,UAC7FiH,EAAYd,KAAKI,OAAOtH,OAAOgI,EAAYT,IAAID,UAGvD7C,EAAAC,EAAAC,cAAA,OAAKe,UAAYsC,EAAYf,aAAe,GAAK,UAAae,EAAYf,aAClEgC,IAAWjB,EAAYf,aAAc,cACzC,OACJxC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,aAAcxC,KAAKgG,0BAA0BlB,GAA5D,aA1LS/C,aAyQVkE,oMAxEeC,GACtB,IAAInB,EAAU,CAAC,SAAU,UAErBzG,EAAY,EACZ2G,EAAQ,EAJmBkB,GAAA,EAAAC,GAAA,EAAAC,OAAAzJ,EAAA,IAM/B,IAN+B,IAM/B0J,EAN+BC,EAAA,eAMpBzB,EANoBwB,EAAAE,MAO3BlI,GAAayG,EAAQ/G,IAAI,SAAA6C,GAAI,OAAIiE,EAAYR,KAAKzD,GAAMlC,SAAQqG,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAI2B,IACrF8B,GAASF,EAAQ/G,IAAI,SAAA6C,GAAI,OACrBiE,EAAYd,KAAKnD,GAAMlC,OACvBmG,EAAYT,IAAIxD,GAAMlC,OACtBmG,EAAYR,KAAKzD,GAAMlC,SAAQqG,OAAO,SAACxD,EAAG2B,GAAJ,OAAU3B,EAAI2B,GAAG,IAL/DsD,EAA0BP,EAAQQ,MAAlCC,OAAAC,cAAAT,GAAAG,EAAAG,EAAAI,QAAAvC,MAAA6B,GAAA,EAAyCI,IANV,MAAAO,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAM,EAAAM,QAAAN,EAAAM,SAAA,WAAAX,EAAA,MAAAC,GAc/B,OAAc,IAAVpB,EACO,KAEH3G,EAAY2G,EAAQ,KAAKC,QAAQ,oCAIzC,IAAIgB,EA7OZ,SAAyB3I,EAAQsB,EAAQC,GACrC,IAAM4H,EAAQ,GADoCM,GAAA,EAAAC,GAAA,EAAAC,OAAAtK,EAAA,IAElD,QAAAuK,EAAAC,EAAmBtI,EAAnB6H,OAAAC,cAAAI,GAAAG,EAAAC,EAAAP,QAAAvC,MAAA0C,GAAA,EAAgC,KAArBpJ,EAAqBuJ,EAAAX,MAC5BE,EAAM9I,GAAQkG,EAASjF,EAAQjB,IAHe,MAAAkJ,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAAA,IAAAG,GAAA,EAAAC,GAAA,EAAAC,OAAA3K,EAAA,IAMlD,QAAA4K,EAAAC,EAAoBlK,EAApBoJ,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAvC,MAAA+C,GAAA,EAA4B,KAAjBhK,EAAiBmK,EAAAhB,MAElB5I,EAAO8I,EADC,GAAA5J,OAAMO,EAAMM,MAAZ,KAAAb,OAAqBO,EAAMO,OAGzCA,EAAKP,EAAM0D,OAAO1D,EAAMwD,MAAM6G,KAAKrK,GACf,SAAhBA,EAAM0D,OAAoB,CAAC,SAAU,UAAUE,SAAS5D,EAAMwD,QAC9DjD,EAAKmG,aAAeQ,EAAsBlH,EAAOO,EAAKmG,gBAZZ,MAAA+C,GAAAQ,GAAA,EAAAC,EAAAT,EAAA,YAAAO,GAAA,MAAAI,EAAAV,QAAAU,EAAAV,SAAA,WAAAO,EAAA,MAAAC,GAgBlD,MAAO,CACH1I,OAAQA,EACR6H,MAAO5G,OAAO6H,OAAOjB,IA2NPkB,CACV5H,KAAK2B,MAAMpE,OACXyC,KAAK2B,MAAM9C,OACXmB,KAAK2B,MAAM+E,OAGXmB,EAAO3B,EAAQQ,MAAM1I,IAAI,SAAAJ,GAAI,OAAI2D,EAAAC,EAAAC,cAACqG,EAAD,CAAYhD,YAAclH,EAC3D8F,IAAM9F,EAAKA,SAGf,OACI2D,EAAAC,EAAAC,cAAA,OAAKe,UAAU,WACXjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kBACXjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,SAAU0D,EAAQrH,OAAOT,KAAK,MAC7CmD,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBAAoBxC,KAAKgG,0BAA0BE,GAAlE,MAEJ3E,EAAAC,EAAAC,cAAA,OAAKe,UAAU,iBACXjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kCACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kCACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,kCACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,wBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,wBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,wBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,wBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,wBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mBACfjB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,mCACXjB,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMe,UAAU,mBAAkBjB,EAAAC,EAAAC,cAAA,QAAMe,UAAU,aAAhB,iBAAvC,QACAjB,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,QAAMe,UAAU,mBAAkBjB,EAAAC,EAAAC,cAAA,QAAMe,UAAU,aAAhB,SAAvC,MACAjB,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,aAEFoG,GAENtG,EAAAC,EAAAC,cAACmC,EAAD,CAAYlH,OAASsD,KAAK2B,MAAMkC,2BAnE1B9B,qBCrJPgG,mLA9GP,GAAiC,IAA7B/H,KAAK2B,MAAMpE,OAAOoB,OAClB,OACI4C,EAAAC,EAAAC,cAAA,OAAKe,UAAU,YACXjB,EAAAC,EAAAC,cAAA,8BAiBZ,IAZA,IAAIuG,EAAQ,GACRC,EAAc,GAEdC,EAAO,IAAIxD,KACXC,KAAKwD,IAALlF,MAAA0B,KAAI7E,OAAAiD,EAAA,EAAAjD,CACGE,KAAK2B,MAAMpE,OAAOS,IACjB,SAAAX,GAAK,OAAI,IAAIqH,KAAKrH,EAAMwC,YAAYuI,iBAI5CC,EAAQ,IAAI3D,KACZ4D,GAAW,IAAI5D,MAAO6D,QAAQF,EAAMG,UAAY,GAC7CN,EAAOI,GAAU,CACpB,IAAIG,EAAM1C,IAAWmC,EAAM,cAC3BF,EAAMN,KAAKe,GACXR,EAAYQ,GAAO,EACnBP,EAAKK,QAAQL,EAAKM,UAAY,GAGlCxI,KAAK2B,MAAMpE,OAAO+F,QAAQ,SAAAjG,GAGtB,IAFA,IAAIqL,EAAQV,EAAMvE,QAAQsC,IAAW1I,EAAMwC,YAAYuI,WAAY,eAC/DO,EAAMtL,EAAMwC,YAAY+I,UAAYZ,EAAMvE,QAAQsC,IAAW1I,EAAMwC,YAAY+I,UAAW,eAAiBZ,EAAMrJ,OAC5GkK,EAAIH,EAAOG,EAAIF,EAAKE,IACzBZ,EAAYD,EAAMa,KAAO,IAIjC,IAAIC,EAAW,CACX,CACIvJ,MAAO,cACPwJ,KAAMf,EAAMhK,IAAI,SAAAkK,GAAI,OAAID,EAAYC,KACpCc,YAAa,IAIjBC,EAAUnJ,OAAOoJ,KAAKjB,GACrBjD,OAAO,SAACxD,EAAG2B,GACR,OAAI8E,EAAYzG,KAAOyG,EAAY9E,GACxB3B,EAAI2B,EAAI3B,EAAI2B,EAGZ8E,EAAYzG,GAAKyG,EAAY9E,GAAK3B,EAAI2B,IAIrDgG,EAAYlB,EAAYgB,GACxBG,EAAenB,EAAYD,EAAMA,EAAMrJ,OAAS,IAChD0K,EAAerB,EAAMrJ,OAASqJ,EAAMvE,QAAQwF,GAAW,EACvDK,GAAQH,EAAYC,GAAgBC,EAEpCE,EADYvB,EAAMvE,QAAQwF,GAAW,EAAKE,EAAYG,EAC1BtB,EAAMrJ,OAEtC,GAAI4K,IAAkBC,IAAU,CAE5B,IADA,IAAItB,EAAO,IAAIxD,KAAKsD,EAAMA,EAAMrJ,OAAS,IAChC8K,EAAI,EAAGA,EAAIF,EAAgB,EAAGE,IACnCvB,EAAKK,QAAQL,EAAKM,UAAY,GAC9BR,EAAMN,KAAK3B,IAAWmC,EAAM,eAGhC,IADA,IAAIwB,EAAa,GACRD,EAAI,EAAGA,EAAIzB,EAAMvE,QAAQwF,GAAUQ,IACxCC,EAAWhC,KAAK,MAEpB,IAAK,IAAI+B,EAAI,EAAGA,EAAIJ,EAAcE,EAAeE,IAC7CC,EAAWhC,KAAKyB,EAAaM,EAAIH,GAErCI,EAAWhC,KAAK,GAChBoB,EAASpB,KAAK,CACVnI,MAAO,qBACPwJ,KAAMW,EACNV,YAAa,EACbW,MAAM,EACNC,YAAa,EACbC,YAAa,UACbC,YAAa,IAKrB,IAAIf,EAAO,CACPlK,OAAQmJ,EACRc,SAAUA,GAYd,OACIvH,EAAAC,EAAAC,cAAA,OAAKe,UAAU,YACXjB,EAAAC,EAAAC,cAAA,UAAMzB,KAAK2B,MAAM9C,OAAOT,KAAK,MAC7BmD,EAAAC,EAAAC,cAACsI,EAAA,EAAD,CAAMhB,KAAOA,EAAOzL,QAbd,CACV0M,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACH/B,IAAK,iBAjGNpG,aCQjBoI,sBAEF,SAAAA,EAAYxI,GAAO,IAAAkB,EAAA,OAAA/C,OAAAC,EAAA,EAAAD,CAAAE,KAAAmK,IACftH,EAAA/C,OAAAsK,EAAA,EAAAtK,CAAAE,KAAAF,OAAAuK,EAAA,EAAAvK,CAAAqK,GAAAG,KAAAtK,QACKe,MAAQ,CACTxD,OAAQ,GACRmJ,MAAO,GACP7H,OAAQ,GACRgF,iBAAkB,cANPhB,2MAeXP,OAAOV,SAAS2I,KAAKtJ,SAAS,6BAC1BlC,EAAQuG,IAAYkF,MACpBlI,OAAOV,SAAS2I,KAAKE,UACjBnI,OAAOV,SAAS2I,KAAK9G,QAAQ,OAGhC/B,MAAMgJ,QAAQ3L,EAAMnB,QACrBmB,EAAMnB,KAAO,CAACmB,EAAMnB,OAEnB8D,MAAMgJ,QAAQ3L,EAAMQ,SACrBR,EAAMQ,MAAQ,CAACR,EAAMQ,QAGrBhD,EAAQ4F,aAAaC,QAAQ,yBACV9F,EAAOqO,cAAcpO,iBAAxCI,SACJqD,KAAK4K,SAAS,CAAC/G,iBAAkBlH,EAAWD,SAE5CmO,SAASxK,MAAQtB,EAAMQ,MAAMnB,KAAK,eAEf9B,EAAOwO,UAAUnO,EAAWH,QAASuC,EAAMQ,MAAOR,EAAMnB,cAAvEL,SAEJyC,KAAK4K,SAAS,CACV/L,OAAQE,EAAMQ,MACdmH,MAAO3H,EAAMnB,KACbL,OAAQA,wIAMX,IAAAwN,EAAA/K,KACL,OACIuB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuJ,EAAA,EAAD,CAAYC,SAAU,SAAAV,GAClBjI,OAAOV,SAASW,YAEpBhB,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,KACI3J,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,KACI5J,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOC,KAAK,WACRC,OAAS,SAAA1J,GAAK,OAAIJ,EAAAC,EAAAC,cAAC6J,EAADxL,OAAAyL,OAAA,GACT5J,EADS,CAEd+E,MAAQqE,EAAKhK,MAAM2F,MACnB7H,OAASkM,EAAKhK,MAAMlC,OACpBtB,OAASwN,EAAKhK,MAAMxD,OACpBsG,iBAAmBkH,EAAKhK,MAAM8C,uBAGtCtC,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOC,KAAK,QACRC,OAAS,SAAA1J,GAAK,OAAIJ,EAAAC,EAAAC,cAAC+J,EAAD1L,OAAAyL,OAAA,GACT5J,EADS,CAEd+E,MAAQqE,EAAKhK,MAAM2F,MACnB7H,OAASkM,EAAKhK,MAAMlC,OACpBtB,OAASwN,EAAKhK,MAAMxD,OACpBsG,iBAAmBkH,EAAKhK,MAAM8C,uBAGtCtC,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOC,KAAK,YACRC,OAAS,SAAA1J,GAAK,OAAIJ,EAAAC,EAAAC,cAACgK,EAAD3L,OAAAyL,OAAA,GACT5J,EADS,CAEd+E,MAAQqE,EAAKhK,MAAM2F,MACnB7H,OAASkM,EAAKhK,MAAMlC,OACpBtB,OAASwN,EAAKhK,MAAMxD,OACpBsG,iBAAmBkH,EAAKhK,MAAM8C,uBAGtCtC,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOO,OAAK,EAACN,KAAK,IAAIO,UAAaC,IACnCrK,EAAAC,EAAAC,cAAC0J,EAAA,EAAD,CAAOQ,UAAYrK,cAnFzBS,cA8GZ6J,mLAIE,OADAtJ,OAAOV,SAASiK,QAAhB,GAAA/O,OAA2BwF,OAAOV,SAASC,SAA3C,aAAA/E,OAAgEwF,OAAOV,SAASpC,SAE5E+B,EAAAC,EAAAC,cAAA,kCALiBM,aAWdoI,IC1HK2B,QACW,cAA7BxJ,OAAOV,SAASmK,UAEe,UAA7BzJ,OAAOV,SAASmK,UAEhBzJ,OAAOV,SAASmK,SAASjK,MACvB,2DCbNkK,IAASX,OAAO9J,EAAAC,EAAAC,cAACwK,EAAD,MAASpB,SAASqB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrP,KAAK,SAAAsP,GACjCA,EAAaC","file":"static/js/main.39d28323.chunk.js","sourcesContent":["import Octokit from '@octokit/rest';\nimport graphql from '@octokit/graphql';\n\nclass Github {\n\n    static async getConnection(token) {\n        if (!token) {\n            return {\n                octokit: new Octokit(),\n                status: 'unauthenticated'\n            }\n        }\n\n        let connection = undefined;\n\n        let octokit = new Octokit({\n            auth: `token ${token}`\n        });\n        await octokit.request('GET /')\n            .then(_ => {\n                connection = {\n                    octokit: octokit,\n                    status: 'authenticated'\n                }\n            })\n            .catch(e => {\n                if (e.name === 'HttpError' && e.status === 401) {\n                    connection = {\n                        octokit: new Octokit(),\n                        status: 'invalid-credentials'\n                    }\n                }\n            });\n\n        return connection;\n    }\n\n    static async getTaskCount(octokit, issue) {\n        let options = octokit.issues.listComments.endpoint.merge({\n            owner: issue.owner,\n            repo: issue.repo,\n            number: issue.number\n        });\n        let comments = await octokit.paginate(options);\n        comments = comments.map(comment => comment.body);\n        comments.unshift(issue.body);\n        comments = comments.join(\"\\n\").split(/\\r?\\n/)\n        let completed = comments.filter(comment => comment.trim().toLowerCase().startsWith('- [x]')).length;\n        let outstanding = comments.filter(comment => comment.trim().startsWith('- [ ]')).length;\n        return {\n            completed: completed,\n            outstanding: outstanding\n        }\n    }\n\n    static async getFullIssues(labels, searchRepos) {\n        const query = `\n            query issueBodiesOverTime($owner: String!, $project: String!, $labels: [String!]!) {\n                repository(owner: $owner, name: $project) {\n                    issues(first: 100, labels: $labels) {\n                        edges {\n                            cursor\n                            node {\n                                number\n                                body\n                                userContentEdits(first: 100) {\n                                    edges {\n                                        node {\n                                            editedAt\n                                            diff\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        for (const repo of searchRepos) {\n            let [owner, project] = repo.split('/');\n            let issues = await graphql(query, {\n                headers: {\n                    authorization: \"token f3b7ff551d31170bef759d1a6889ee62ce5b3a83\"\n                },\n                owner: owner,\n                project: project,\n                labels: labels\n            });\n            console.log(issues);\n        }\n    }\n\n    static async getIssues(octokit, labels, searchRepos) {\n        let searchString = searchRepos.map(repo => 'repo:' + repo)\n            .join(' ') + ' ' + labels.map(label => `label:${label}`).join(' ') + ' is:issue';\n\n        const options = octokit.search.issuesAndPullRequests.endpoint.merge({\n            q: searchString\n        });\n\n        let githubIssues = await octokit.paginate(options);\n\n        return githubIssues.map(issue => new Issue(issue));\n    }\n\n}\n\nclass Issue {\n\n    constructor(githubIssue) {\n\n        this.githubIssue = githubIssue;\n        this.url = githubIssue.html_url;\n        this.labels = githubIssue.labels.map(label => {\n            return {\n                color: label.color,\n                name: label.name\n            }\n        });\n        this.progress = undefined;\n        this.title = githubIssue.title;\n        this.number = githubIssue.number;\n        this.assignees = githubIssue.assignees;\n\n        let components = githubIssue.repository_url.split('/');\n        [this.owner, this.repo] = components.slice(components.length - 2);\n\n        this.type = Issue.getType(githubIssue);\n        this.state = Issue.getState(githubIssue);\n\n    }\n\n    static getType(githubIssue) {\n        let labels = githubIssue.labels.map(label => label.name);\n        if (labels.includes('bug')) {\n            for (const priority of ['p1', 'p2', 'p3']) {\n                if (labels.includes(priority)) {\n                    return `${priority}bugs`;\n                }\n            }\n            return `p1bugs`; // If the bug isn't prioritised, counting it as P1 will encourage\n                             // prioritisation.\n        }\n        else if (labels.includes('feature') || labels.includes('enhancement')) {\n            return 'issues';\n        }\n        return 'others';\n    }\n\n    static getState(githubIssue) {\n        if (githubIssue.state === 'closed') {\n            return 'done';\n        }\n        else if (githubIssue.state === 'open' && (\n                githubIssue.assignees.length === 0 ||\n                githubIssue.assignee === undefined)\n        ) {\n            return 'todo';\n        }\n        else {\n            return 'wip';\n        }\n    }\n\n}\n\nexport default Github;\n","import React, { Component } from 'react';\n\nclass Fail extends Component {\n\n    render() {\n        return (\n            <pre>\n                {`\n    ▄██████████████▄▐█▄▄▄▄█▌\n    ██████▌▄▌▄▐▐▌███▌▀▀██▀▀\n    ████▄█▌▄▌▄▐▐▌▀███▄▄█▌\n    ▄▄▄▄▄██████████████\n\n    What is a \"`}\n            { Array.join(\n                this.props.location.pathname.match(/.{1,36}/g),\n                '\\n                       ')\n            }\"?\n            </pre>\n        );\n    }\n}\n\nexport default Fail;\n","import React, { Component } from 'react';\n\nclass TokenInput extends Component {\n\n    handleClick(e) {\n        e.preventDefault();\n        let token = prompt('Personal github token', localStorage.getItem('github_token') || '');\n        if (token !== null) {\n            localStorage.setItem('github_token', token);\n            window.location.reload();\n        }\n    }\n\n    render() {\n        return (\n            <div className={ `TokenInput ${this.props.status}` } \n                onClick={ this.handleClick }\n                title={\n                    this.props.status === 'unauthenticated' ? 'Add a personal GitHub token to raise the limit of requests you can make to the API' :\n                    this.props.status === 'invalid-credentials' ? 'Your github token is invalid (fell back to unauthenticated access)' : 'Successfully connecting using personal GitHub token'\n                }>\n                { this.props.status === 'unauthenticated' ? 'Add ' : '' }Personal GitHub Token\n            </div>\n        );\n    }\n\n}\n\nexport default TokenInput;\n","import React, { Component } from 'react';\n\nimport TokenInput from './TokenInput';\n\nclass Plan extends Component {\n\n    render() {\n        let phases = [...new Set(\n            [].concat(...this.props.issues.map(issue =>\n                issue.labels.map(label => label.name)\n            )))]\n            .filter(label => label.startsWith(\"phase:\"))\n            .sort((a, b) => {\n                return Number(a.split(\":\")[1]) -\n                    Number(b.split(\":\")[1]);\n            });\n\n        let phasedIssues = {};\n        phases.forEach(phase => {\n            phasedIssues[phase] = this.props.issues.filter(issue => {\n                return issue.labels.map(label => label.name)\n                    .includes(phase);\n            })\n                .sort((a, b) => {\n                    let states = ['done', 'wip', 'todo'];\n                    if (a.state === b.state) {\n                        return a.number - b.number;\n                    }\n                    else {\n                        return states.indexOf(a.state) - states.indexOf(b.state);\n                    }\n                });\n        });\n        return (\n            <div className=\"Plan\">\n                <p className=\"label\">{ this.props.labels.join(' ') }</p>\n                <ul>\n                    {\n                        phases.map(phase => {\n                            return (\n                                <li className=\"phase\" key={ phase }>{ phase }\n                                    <ul>\n                                        {\n                                            phasedIssues[phase].map(issue =>\n                                                <li className=\"task\" key={ issue.number }>\n                                                    <a href={ issue.url }>{ `${issue.number} ${issue.title}` }</a>\n                                                    <span className={ 'state ' + issue.state }>\n                                                    {\n                                                        issue.state === 'done' ? ' (done)' : issue.state === 'wip' ? ' (in progress)' : ''\n                                                    }\n                                                    </span>\n                                                </li>\n                                            )\n                                        }\n                                    </ul>\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n                <TokenInput status={ this.props.connectionStatus }/>\n            </div>\n        );\n    }\n\n}\n\nexport default Plan;\n","import React, { Component } from 'react';\nimport dateFormat from 'dateformat';\n\nimport TokenInput from './TokenInput';\n\nfunction template(labels, repo) {\n    return {\n        labels: labels,\n        repo: repo,\n        deliveryDate: undefined,\n        todo: {\n            issues: [],\n            p1bugs: [],\n            p2bugs: [],\n            p3bugs: [],\n            others: []\n        },\n        wip: {\n            issues: [],\n            p1bugs: [],\n            p2bugs: [],\n            p3bugs: [],\n            others: []\n        },\n        done: {\n            issues: [],\n            p1bugs: [],\n            p2bugs: [],\n            p3bugs: [],\n            others: []\n        }\n    };\n}\n\nfunction establishDeliveryDate(issue, deliveryDate) {\n    if (deliveryDate === null) {\n        return null;\n    }\n    else if (issue.milestone && issue.milestone.due_on) {\n        if (deliveryDate === undefined) {\n            return new Date(issue.milestone.due_on);\n        }\n        else {\n            return Math.max(deliveryDate, new Date(issue.milestone.due_on));\n        }\n    }\n    else {\n        return null;\n    }\n}\n\n\nfunction generateSummary(issues, labels, searchRepos) { \n    const repos = {};\n    for (const repo of searchRepos) {\n        repos[repo] = template(labels, repo);\n    }\n\n    for (const issue of issues) {\n        const repoName = `${issue.owner}/${issue.repo}`\n        const repo = repos[repoName];\n\n        repo[issue.state][issue.type].push(issue);\n        if (issue.state !== 'done' && ['issues', 'p1bugs'].includes(issue.type)) {\n            repo.deliveryDate = establishDeliveryDate(issue, repo.deliveryDate);\n        }\n\n    }\n    return {\n        labels: labels,\n        repos: Object.values(repos)\n    }\n}\n\n\nclass SummaryRow extends Component {\n    calculatePercentCompleted(repoFeature) {\n        let counted = ['issues', 'p1bugs'];\n\n        let completed = counted.map(type => repoFeature.done[type].length).reduce((a, b) => a + b);\n        let total = counted.map(type =>\n            repoFeature.todo[type].length +\n            repoFeature.wip[type].length +\n            repoFeature.done[type].length).reduce((a, b) => a + b, 0);\n\n        if (total === 0) {\n            return '~';\n        }\n        return (completed / total * 100).toFixed(0);\n    }\n\n    getAssigneesFilter(issues) {\n        let filter = [...new Set(issues.map(issue => issue.assignees.map(assignee => assignee.login))\n            .reduce((a, b) => a.concat(b), []))]\n            .map(assignee => `assignee:${assignee}`)\n            .join('+');\n        if (!filter) {\n            filter = 'no:assignee';\n        }\n        return filter;\n    }\n\n    makeLink(repo, labels, q, issues) {\n        if (issues.length === 0) {\n            return (\n                <span>0</span>\n            );\n        }\n        if (!q) {\n            q = []\n        }\n        let advanced = false;\n\n        if (q.includes('assignee:*')) {\n            /* If the list of labels includes ['assignee', '*'], we'll strip it from the\n             * list and implement our search link using github's _advanced_ search\n             * functionality instead. This is because assignee:* doesn't reliably work\n             * with regular search (or advanced), so instead we have to apply the other\n             * search criteria _and_ a list of assignee:x where x all the assignees of\n             * all the issues which have assignees. Is that clear? Good, great. */\n            q = q.filter(item => item !== 'assignee:*')\n            advanced = true;\n        }\n        q = q.concat(labels.map(label => `label:${label}`));\n\n        let queryString = q.join('+');\n\n        let searchUrl = \"\";\n        if (advanced) {\n            let assigneesFilter = this.getAssigneesFilter(issues);\n            searchUrl = `https://github.com/search?utf8=%E2%9C%93&q=repo%3A${repo}+${queryString}+${assigneesFilter}&type=Issues&ref=advsearch&l=&l=+`;\n        }\n        else {\n            searchUrl = `https://github.com/${repo}/issues?utf8=%E2%9C%93&q=${queryString}`;\n        }\n\n        let issueNumbers = issues.map(x => `#${x.number} ${x.title}`).reduce((a, b) => a.concat(b), []);\n        return (\n            <a href={ searchUrl } target=\"_blank\" rel=\"noopener noreferrer\" title={ issueNumbers.join(\"\\n\") }>\n                { issueNumbers.length }\n            </a>\n        );\n    }\n\n    render() {\n        let repoFeature = this.props.repoFeature;\n\n        return (\n            <div className=\"Summary-Row\">\n                <div><a href={ `https://github.com/${ repoFeature.repo }/issues` }>{ repoFeature.repo }</a></div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'no:assignee',\n                            'label:feature'\n                        ],\n                        repoFeature.todo.issues\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'assignee:*',\n                            'label:feature'\n                        ],\n                        repoFeature.wip.issues\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:closed',\n                            'label:feature'\n                        ],\n                        repoFeature.done.issues\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'no:assignee',\n                            'label:bug',\n                            '-label:p2', /* Any bug not flagged as p2-5 is p1 */\n                            '-label:p3', /* This is weird, but encourages the triaging */\n                            '-label:p4', /* of unprioritised bugs. */\n                            '-label:p5'\n                        ],\n                        repoFeature.todo.p1bugs\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'no:assignee',\n                            'label:bug',\n                            'label:p2'\n                        ],\n                        repoFeature.todo.p2bugs\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'no:assignee',\n                            'label:bug',\n                            'label:p3'\n                        ],\n                        repoFeature.todo.p3bugs\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:open',\n                            'assignee:*',\n                            'label:bug'\n                        ],\n                        repoFeature.wip.p1bugs.concat(repoFeature.wip.p2bugs).concat(repoFeature.wip.p3bugs)\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        [\n                            'is:closed',\n                            'label:bug'\n                        ],\n                        repoFeature.done.p1bugs.concat(repoFeature.done.p2bugs).concat(repoFeature.done.p3bugs)\n                    )\n                }</div>\n                <div>{\n                    this.makeLink(\n                        repoFeature.repo,\n                        repoFeature.labels,\n                        ['is:open'].concat(repoFeature.todo.others.concat(repoFeature.wip.others).map(issue => issue.number)),\n                        repoFeature.todo.others.concat(repoFeature.wip.others)\n                    )\n                }</div>\n                <div className={ repoFeature.deliveryDate ? \"\" : \"NoDate\" }>{ repoFeature.deliveryDate ?\n                        dateFormat(repoFeature.deliveryDate, 'yyyy-mm-dd') :\n                    'n/a' }</div>\n                <div className=\"Completed\">{ this.calculatePercentCompleted(repoFeature) }%</div>\n            </div>\n        );\n    }\n}\n\nclass Summary extends Component {\n    calculatePercentCompleted(feature) {\n        let counted = ['issues', 'p1bugs'];\n\n        let completed = 0;\n        let total = 0;\n\n        for (const repoFeature of feature.repos) {\n            completed += counted.map(type => repoFeature.done[type].length).reduce((a, b) => a + b);\n            total += counted.map(type => \n                repoFeature.todo[type].length +\n                repoFeature.wip[type].length +\n                repoFeature.done[type].length).reduce((a, b) => a + b, 0);\n        }\n\n        if (total === 0) {\n            return \"~\";\n        }\n        return (completed / total * 100).toFixed(0);\n    }\n\n    render() {\n        let feature = generateSummary(\n            this.props.issues,\n            this.props.labels,\n            this.props.repos\n        );\n\n        let rows = feature.repos.map(repo => <SummaryRow repoFeature={ repo }\n            key={ repo.repo } />\n        );\n\n        return (\n            <div className=\"Summary\">\n                <div className=\"Summary-Header\">\n                    <div className=\"Label\">{ feature.labels.join(' ') }</div>\n                    <div className=\"PercentComplete\">{ this.calculatePercentCompleted(feature) }%</div>\n                </div>\n                <div className=\"Summary-Table\">\n                    <div className=\"Summary-Column\"></div>\n                    <div className=\"Summary-Column Implementation\"></div>\n                    <div className=\"Summary-Column Implementation\"></div>\n                    <div className=\"Summary-Column Implementation\"></div>\n                    <div className=\"Summary-Column Bugs\"></div>\n                    <div className=\"Summary-Column Bugs\"></div>\n                    <div className=\"Summary-Column Bugs\"></div>\n                    <div className=\"Summary-Column Bugs\"></div>\n                    <div className=\"Summary-Column Bugs\"></div>\n                    <div className=\"Summary-Column\"></div>\n                    <div className=\"Summary-Column\"></div>\n                    <div className=\"Summary-Column\"></div>\n                    <div className=\"Summary-Row Summary-TableHeader\">\n                        <div>Repo</div>\n                        <div><span className=\"MetaTitleHolder\"><span className=\"MetaTitle\">Planned Work</span></span>Todo</div>\n                        <div>WIP</div>\n                        <div>Done</div>\n                        <div><span className=\"MetaTitleHolder\"><span className=\"MetaTitle\">Bugs</span></span>P1</div>\n                        <div>P2</div>\n                        <div>P3</div>\n                        <div>WIP</div>\n                        <div>Fixed</div>\n                        <div>Other</div>\n                        <div>Delivery</div>\n                        <div></div>\n                    </div>\n                    { rows }\n                </div>\n                <TokenInput status={ this.props.connectionStatus }/>\n            </div>\n        );\n    }\n}\n\nexport default Summary;\n","import React, { Component } from 'react';\n\nimport dateFormat from 'dateformat';\nimport { Line } from 'react-chartjs-2';\n\nclass Burndown extends Component {\n\n    render() {\n        if (this.props.issues.length === 0) {\n            return (\n                <div className=\"Burndown\">\n                    <h3>Loading data...</h3>\n                </div>\n            );\n        }\n\n        let dates = [];\n        let issueCounts = {};\n\n        let date = new Date(\n            Math.min(\n                ...this.props.issues.map(\n                    issue => new Date(issue.githubIssue.created_at)\n                )\n            )\n        );\n        let today = new Date();\n        let tomorrow = new Date().setDate(today.getDate() + 1);\n        while (date < tomorrow) {\n            let day = dateFormat(date, 'yyyy-mm-dd');\n            dates.push(day);\n            issueCounts[day] = 0;\n            date.setDate(date.getDate() + 1);\n        }\n\n        this.props.issues.forEach(issue => {\n            let start = dates.indexOf(dateFormat(issue.githubIssue.created_at, 'yyyy-mm-dd'));\n            let end = issue.githubIssue.closed_at ? dates.indexOf(dateFormat(issue.githubIssue.closed_at, 'yyyy-mm-dd')) : dates.length;\n            for (let n = start; n < end; n++) {\n                issueCounts[dates[n]] += 1;\n            }\n        });\n\n        let datasets = [\n            {\n                label: 'Open issues',\n                data: dates.map(date => issueCounts[date]),\n                lineTension: 0,\n            }\n        ];\n\n        let maxDate = Object.keys(issueCounts)\n            .reduce((a, b) => {\n                if (issueCounts[a] === issueCounts[b]) {\n                    return a < b ? a : b;\n                }\n                else {\n                    return issueCounts[a] > issueCounts[b] ? a : b\n                }\n            });\n\n        let maxIssues = issueCounts[maxDate];\n        let todaysIssues = issueCounts[dates[dates.length - 1]];\n        let elapsedDays = (dates.length - dates.indexOf(maxDate) - 1);\n        let rate = (maxIssues - todaysIssues) / elapsedDays;\n        let totalDays = dates.indexOf(maxDate) + 1 + (maxIssues / rate);\n        let remainingDays = totalDays - dates.length;\n\n        if (remainingDays !== Infinity) {\n            let date = new Date(dates[dates.length - 1]);\n            for (let i = 0; i < remainingDays + 1; i++) {\n                date.setDate(date.getDate() + 1);\n                dates.push(dateFormat(date, 'yyyy-mm-dd'));\n            }\n            let projection = [];\n            for (let i = 0; i < dates.indexOf(maxDate); i++) {\n                projection.push(null);\n            }\n            for (let i = 0; i < elapsedDays + remainingDays; i++) {\n                projection.push(maxIssues - (i * rate));\n            }\n            projection.push(0);\n            datasets.push({\n                label: 'Projected delivery',\n                data: projection,\n                lineTension: 0,\n                fill: false,\n                pointRadius: 0,\n                borderColor: '#738d04',\n                borderWidth: 1\n            });\n\n        }\n\n        let data = {\n            labels: dates,\n            datasets: datasets\n        };\n        let options = {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        min: 0\n                    }\n                }]\n            }\n        };\n\n        return (\n            <div className=\"Burndown\">\n                <h3>{ this.props.labels.join(' ') }</h3>\n                <Line data={ data } options={ options }/>\n            </div>\n        );\n    }\n\n}\n\nexport default Burndown;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport queryString from 'query-string';\nimport HashChange from 'react-hashchange';\n\nimport Github from './Github';\nimport Fail from './components/Fail';\nimport Plan from './components/Plan';\nimport Summary from './components/Summary';\nimport Burndown from './components/Burndown';\n\nimport './feature-dashboard.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            issues: [],\n            repos: [],\n            labels: [],\n            connectionStatus: 'connecting'\n        }\n    }\n\n    async componentDidMount() {\n        /*\n         * FIXME: This _looks_ wrong. Why are we fiddling around parsing the location.hash\n         * when we've got a perfectly good HashRouter to do that for us?\n         */\n        if (window.location.hash.includes(\"?\")) {\n            let query = queryString.parse(\n                window.location.hash.substring(\n                    window.location.hash.indexOf(\"?\")\n                )\n            )\n            if (!Array.isArray(query.repo)) {\n                query.repo = [query.repo];\n            }\n            if (!Array.isArray(query.label)) {\n                query.label = [query.label];\n            }\n\n            let token = localStorage.getItem('github_token');\n            let connection = await Github.getConnection(token);\n            this.setState({connectionStatus: connection.status });\n\n            document.title = query.label.join(' ');\n\n            let issues = await Github.getIssues(connection.octokit, query.label, query.repo);\n\n            this.setState({\n                labels: query.label,\n                repos: query.repo,\n                issues: issues\n            });\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <HashChange onChange={hash => {\n                    window.location.reload();\n                }} />\n                <Router>\n                    <Switch>\n                        <Route path=\"/summary\"\n                            render={ props => <Summary\n                                { ...props }\n                                repos={ this.state.repos }\n                                labels={ this.state.labels }\n                                issues={ this.state.issues }\n                                connectionStatus={ this.state.connectionStatus }\n                            /> }\n                        />\n                        <Route path=\"/plan\" \n                            render={ props => <Plan\n                                { ...props }\n                                repos={ this.state.repos }\n                                labels={ this.state.labels }\n                                issues={ this.state.issues }\n                                connectionStatus={ this.state.connectionStatus }\n                            /> }\n                        />\n                        <Route path=\"/burndown\" \n                            render={ props => <Burndown\n                                { ...props }\n                                repos={ this.state.repos }\n                                labels={ this.state.labels }\n                                issues={ this.state.issues }\n                                connectionStatus={ this.state.connectionStatus }\n                            /> }\n                        />\n                        <Route exact path=\"/\" component= { RedirectLegacy } />\n                        <Route component={ Fail } />\n                    </Switch>\n                </Router>\n            </div>\n        );\n    }\n\n}\n\n/* \n * Legacy links to this tool just passed query params to the root:\n *\n * http://host/?repo=example-org/example-repo&...\n *\n * I want to redirect those links to the summary view, but I wasn't able to\n * make ReactRouter execute the redirect without making a mess of the query \n * params:\n *\n * http://host/?repo=... -> http://host/?repo=...#/summary\n *\n * Crucially, after the ReactRouter redirect, the query params were no longer\n * accessible to `this.props.location.search`. So instead we're taking matters\n * into our own hands and wrestling `window.location.replace` directly,\n * preserving the query params in the destination:\n *\n * http://host/?repo=... -> https://host/#/summary?repo=...\n */\nclass RedirectLegacy extends Component {\n\n    render() {\n        window.location.replace(`${window.location.pathname}#/summary${ window.location.search }`);\n        return (\n            <p>Redirecting...</p>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}